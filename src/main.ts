import axios from 'axios';
import { app, BrowserWindow, Cookie, ipcMain, session, webContents } from 'electron';
import { initRedisClient } from './utils/redis';
import { RedisClientType } from 'redis';
import { duolingoAuthentication } from './utils/duolingo.authentication';

require('dotenv').config();

let redisClient: RedisClientType;
let duolingoCookies: Array<Cookie> = [];

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = async (): Promise<void> => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false, 
      devTools: true
    },
    show: false
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  session.defaultSession.cookies.get({}).then( (sessionCookies) => duolingoCookies.push(...sessionCookies))
  if (duolingoCookies.length === 0) duolingoCookies = await duolingoAuthentication(redisClient);
  
  mainWindow.show();

  const allKeys = await redisClient.keys("*");
  allKeys.forEach( async key => {
    await redisClient.get(key)
  });

  ipcMain.on('request-api-call', async (_e: Electron.IpcMainEvent) => {

    const setCookieHeader = (): string => {
      let cookieHeaderString = "";
  
    
      for (let cookie of duolingoCookies) {
        let cookieString = "";
        cookieString = cookie.name + "=" + cookie.value + ";"
        cookieHeaderString += cookieString;
      }
  
      return cookieHeaderString.trim();
    }
  
    try {
      const cookieHeaderString: string = setCookieHeader();
      const duolingoUrl = process.env.DUOLINGO_API_URL + process.env.DUOLINGO_USERNAME;
      const res = await axios.get(duolingoUrl, {
        headers: {
          "User-Agent" :"Mozilla/5.0 (X11; Linux x86_64; rv:127.0) Gecko/20100101 Firefox/127.0",
          "Cookie" : `${cookieHeaderString}`
        },
      });
      console.log(res);
      // Data need to be serialized for WebContent to send back to renderer
      // mainWindow.webContents.send('duolingo-data', res /*res.data.language_data.de.skills);
    } catch (e) {
      console.log(e);
    } 
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  // Clear Electron Session Storage, 
  // all cookies and return cache size
  session.defaultSession.clearStorageData()
  .then(
    () => session.defaultSession.getCacheSize()
  )
  .then(
    (cacheSize: number) => console.log(cacheSize)
  )
  .catch((e) => console.error(e))
  
  redisClient = await initRedisClient();
  await createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.



